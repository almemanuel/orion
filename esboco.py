# -*- coding: utf-8 -*-
"""Empuxo.ipynb

Automatically generated by Colaboratory.

Código Base: https://colab.research.google.com/drive/1bsX5PWVkDug-rEGKFAq-b_aMmZ1GeTkg

Os códigos foram tirados do Projeto proptools: Rocket Propulsion Design Tools.

Proptools é um pacote do Python para projetar sistemas de propulsão de foguetes.
O software foi escrito por Matthew Vernacchia, um pesquisador graduado no departamento de Aeronáutica e Astronáutica do MIT.

A maioria das equações foram tiradas do livro "Modern Engineering for Design of Liquid-Propellant Rocket Engines", de Dieter Huzel e David Huang, e do "Rocket Propulsion Elements", de George Sutton e Oscar Biblarz.

Mais informações do projeto estão no site:
https://proptools.readthedocs.io/en/latest/nozzle_tutorial.html#thrust

Os códigos completos estão no GitHub:
https://github.com/mvernacc/proptools
"""

#pip install proptools-rocket

import fire
from matplotlib import pyplot as plt
import numpy as np
from proptools import solid
from proptools import nozzle
from scipy.optimize import fsolve
from scipy.integrate import cumtrapz
# Ignorar o warning
import warnings
warnings.filterwarnings('ignore', 'The iteration is not making good progress')

# Tratamento de Erros
class Tratamento:
    def imprimir(num, msg):
        """
        Imprimi uma mensagem na tela, dependendo da situação

        Parametros:
        num (str) -> valor que deveria ser numérico.
        Caso seja uma string vazia, significa que é um valor que não foi informado
        msg (str) -> contexto do parametro num

        Retorna:
        teste(num, msg), onde:
            str: num -> valor a ser testado em teste
            str: msg -> contexto de num
        """
        if num == '':
            num = input(f'Informe um valor para {msg}: ')
        else:
            num = input(f'Valor invalido para {msg}. Tente novamente: ')
        return Tratamento.teste(num, msg)


    def teste(num, msg):
        """
        Testa se o parametro num é positivo

        Parametros:
        num (str) -> valor a ser testado.
        msg (str) -> contexto do parametro num

        Retorna:
        float(num), onde:
            str: num -> transformado em float, entrada válida
        imprimir(num, msg), onde:
            str: num -> valor invalido que deverá ser informado novamente pelo usuário
            str: msg -> contexto do parametro num
        """
        try:
            float(num) > 0
            return float(num)
        except:
            pass
        return Tratamento.imprimir(num, msg)


class Grao:
    """
    As funçoes neste classe verificam se os valores para as medidas do grão são válidas
    OBS: Talvez essa classe e funções não sejaa necessárias, porém adicionei da mesma forma para que o código siga um padrão e também fique mais legível
    """
    def raio_interno(valor, msg):
        """
        Testa o valor do raio interno do grao (m) informado pelo usuário
        Parametros:
        valor (str) -> medida do raio interno (m)
        msg (str) -> contexto do parametro valor

        Retorno:
        Tratamento.teste(valor, msg), onde:
            str: valor -> valor a ser testado
            str: msg -> contexto do parametro valor
        """
        return Tratamento.teste(valor, msg)


    def raio_externo(valor, msg):
        """
        Testa o valor do raio externo do grao (m) informado pelo usuário
        Parametros:
        valor (str) -> medida do raio externo (m)
        msg (str) -> contexto do parametro valor

        Retorno:
        Tratamento.teste(valor, msg), onde:
            str: valor -> valor a ser testado
            str: msg -> contexto do parametro valor
        """
        return Tratamento.teste(valor, msg)


    def comprimento(valor, msg):
        """
        Testa o valor do comprimento do grao (m) informado pelo usuário
        Parametros:
        valor (str) -> medida do comprimento (m)
        msg (str) -> contexto do parametro valor

        Retorno:
        Tratamento.teste(valor, msg), onde:
            str: valor -> valor a ser testado
            str: msg -> contexto do parametro valor
        """
        return Tratamento.teste(valor, msg)


## main
def main(r_in = '', r_ex = '', comp = ''):
    r_in = Grao.raio_interno(r_in, 'raio interno do grao (m)')
    r_ex = Grao.raio_externo(r_ex, 'raio externo do grao (m)')
    comp = Grao.comprimento(comp, 'comprimento do grao (m)')
    return 'fim'


fire.Fire(main)