# -*- coding: utf-8 -*-
"""Empuxo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bsX5PWVkDug-rEGKFAq-b_aMmZ1GeTkg

Os códigos foram tirados do Projeto proptools: Rocket Propulsion Design Tools.

Proptools é um pacote do Python para projetar sistemas de propulsão de foguetes.
O software foi escrito por Matthew Vernacchia, um pesquisador graduado no departamento de Aeronáutica e Astronáutica do MIT.

A maioria das equações foram tiradas do livro "Modern Engineering for Design of Liquid-Propellant Rocket Engines", de Dieter Huzel e David Huang, e do "Rocket Propulsion Elements", de George Sutton e Oscar Biblarz.

Mais informações do projeto estão no site:
https://proptools.readthedocs.io/en/latest/nozzle_tutorial.html#thrust

Os códigos completos estão no GitHub:
https://github.com/mvernacc/proptools
"""

#pip install proptools-rocket

from matplotlib import pyplot as plt
import numpy as np
from proptools import solid
from proptools import nozzle
from scipy.optimize import fsolve
from scipy.integrate import cumtrapz

"""# **RELATÓRIO SOBRE OS CÁLCULOS DA FORÇA DE IMPULSO**

*Parâmetros de acordo com o projeto do Foguete M42*

O objetivo é produzir um gráfico da evolução temporal da força de impulso sobre o foguete. No relatório estão descritos os cálculos intermediários que incluem a pressão na câmara (Pc) e a pressão de saída (Pe).

## EQUAÇÃO FORÇA DE IMPULSO (F)

A força de impulso de um motor de foguete é igual ao fluxo de saída do bucal mais uma força de pressão na saída:

\begin{equation}
F = \dot{m}v_e + (p_e - p_a)A_e
\end{equation}

Esta equação pode ser reescrita em termos da pressão de saída (Pe):

\begin{equation}
F = A_tp_e\sqrt{\frac{2\gamma^2}{\gamma - 1}\left(\frac{2}{\gamma + 1}\right)^\frac{\gamma + 1}{\gamma - 1}\left(1 -\left(\frac{p_e}{p_c}\right)^\frac{\gamma + 1}{\gamma}\right)} + (p_e - p_a)A_e
\end{equation}

Para resolver esta equação são necessárias as seguintes variáveis:

$\gamma$ : Razão da capacidade de calor de exaustão;

At ($m^2$): Área da garganta do bucal (nozzle throat);

Ae ($m^2$): Área da saída do bucal (nozzle);

Pa ($Pa$): Pressão atmosférica;

Pc ($Pa$): Pressão na câmara;

Pe ($Pa$): Pressão de saída;

O fator gama ($\gamma$) é uma propriedade associada ao combustível e as áreas (At e Ae) se referem à geometria do bucal. Antes de calcular a força é preciso determinar as pressões Pc e Pe.

## PARÂMETROS

### Geometria do Grão (cilíndrico com porte circular)
"""

r_in = 0.015    # Raio interno do grão [unidade: metro].
r_ex = 0.044    # Raio externo do grão [unidade: metro].
L = 1.10        # Comprimento do grão [unidade: metro].

"""### Propriedades do Combustível e do Gás de Exaustão"""

R_univ = 8.314                   # Constante universal dos gase [unidade: joule kelvin**-1 mole**-1] ???????????????????????????????????????
gamma = 1.1332                   # Razão da capacidade de calor de exaustão [unidade: adimensional].
m_molar = 20e-3                  # Massa molar dos gases de escape [unidade: kilograma mole**-1].???????????????????????????????
T_c = 1750.                      # Temperatura do combustível [unidade: kelvin].
rho_solid = 1792.7               # Densidade do combustível sólido [unidade: kilograma metro**-3].
n = 0.5                          # Expoente da taxa de queima do combustível [unidade: adimensional].
a = 3.19e-3 * (8.260e6)**(-n)    # Coeficiente da taxa de queima, sendo que o combustível 
                                 # queima a 3.19 mm s**-1 a 8.260 MPa [unidade: metro segundo**-1 pascal**-n]. ??????????????????????????????????????

"""### Geometria do Bucal

"""

D_t = 0.00708             # Diâmetro da garganta [unidade: metro]
A_t = np.pi*((D_t)**2)    # Área da garganta [unidade: metro**2].
A_e = 3.94e-5             # Área de saída da garganta [unidade: metro**2]. ???????????????????????????????????????????????

"""## PRESSÃO NA CÂMARA (Pc)

A pressão na câmara pode ser calculada como:

\begin{equation}
p_c = \left(\frac{A_b}{A_t}\rho_sc^*a\right)^\frac{1}{1-n}
\end{equation}

Para resolver esta equação são necessárias as seguintes variáveis:

$\rho_s$ $\left(\frac{kg}{m^3}\right)$ : Densidade do combustível sólido;

a $\left(\frac{m}{s} Pa^{-n}\right)$: Coeficiente da taxa de queima;

n: Coeficiente da taxa de queima;

$c^*$ $\left(\frac{m}{s}\right)$: Velocidade característica;

At ($m^2$): Área da garganta do bucal (nozzle throat);

Ab ($m^2$): Área de queima;

O parâmetro Ab (área de queima) é variável ao longo do tempo na medida que o combustível é queimado. No próximo tópico será descrito a abordagem adotada para definer a evolução da área de queima (Ab).

### Área de queima do combustível

Considere o modelo de um grão cilíndrico em que o comprimento L não se altera ao longo da queima. A queima começa ao longo do comprimento do núcleo central (raio interno = r_in), e a superfície de queima instantânea progride radialmente para fora até o limite do raio externo (r_ex).

<img src = 'https://www.intechopen.com/media/chapter/66819/media/F5.png'>

Condirerou-se que para cada intervalo de tempo (t1, t2,...) ocorre um acréscimo de tamanho x  no raio interno (r_in), aumentando a superfície instatânea de queima Ab. Definindo o incremento de x (dx) e considerando a diferença r_ex - r_in se determina o número de segmentos (linhas vermelhas) para os quais serão calculados a superfície instatânea de queima Ab.   

<img src = 'https://www.nakka-rocketry.net/burn/surfreg3.gif'>

Desta forma, a área de queima instantânea é calculada como a área da lateral do cilíndro oco, representado pelo raio r_in + x:

\begin{equation}
A_b (x) = 2\pi(r_{in} + x)L
\end{equation}

A razão $K=\frac{A_b}{A_t}$ é conhecida como Razão entre a Área de Combustão e a Área da garganta (A_t).
"""

# Evolução da área de combustão
x = np.linspace(0, r_ex - r_in)    # Distância em relação ao menor raio em direção ao maior raio, dividido em 50 segmentos [unidade: metro].
A_b = 2 * np.pi * (r_in + x) * L   # Área do combustivel sendo queimada por segmento [unidade: metro**2].
K = A_b / A_t     # Razão da Área de Combustão (A_b) e Área da garganta (A_t)
print(K)

"""### Velocidade característica (c*)

A velocidade característica depende apenas de propriedades de exaustão ($\gamma$, R) e da temperatura de combustão ($T_c$).

\begin{equation}
c^* = \frac{\sqrt{\gamma R T_c}}{\gamma}\left(\frac{\gamma + 1}{2} \right)^{\frac{\gamma + 1}{2(\gamma - 1)}}
\end{equation}

Para resolver esta equação são necessários os seguintes parâmetros:

$\gamma$ : Razão da capacidade de calor de exaustão;

R (J/Kmol): Constante universal dos gases;

Tc (K): Temperatura do combustível;
"""

# Velocidade característica [unidade: metro segundo**-1]
# Função do pacote proptools
c = nozzle.c_star(gamma, m_molar, T_c)
print(c)

# Velocidade característica [unidade: metro segundo**-1]
c = ((gamma * (R_univ / m_molar) * T_c)**0.5 / gamma )\
        * ((gamma + 1)/2)**((gamma + 1) / (2 * (gamma - 1)))
print(c)

"""### Cálculo da Pressão na câmara (Pc)"""

# Pressão na câmera de combustão 
# Função do pacote proptools
p_c = solid.chamber_pressure(A_b / A_t, a, n, rho_solid, c) # [unidade: pascal]
print(p_c)

# Pressão na câmera de combustão 
p_c = (K * rho_solid * a * c) ** (1 / (1 - n))   # [unidade: pascal]
print(p_c)

"""Como foram definidos 50 segmentos para as superfícies de queima instatânea são calculados a pressão da câmara para cada instante de tempo no qual se atinge o determinado segmento.

### Taxa de queima (r)

A taxa de queima (r) é calculada em função da pressão na câmara (Pc) e do coeficiente (a) e expoente (n) de queima.

\begin{equation}
r = a (P_c)^n
\end{equation}
"""

# Taxa de queima
r = a * p_c**n   # [unidade: metro segundo**-1(pascal)**-n]

"""## Pressão de saída (Pe)

A pressão de saída pode ser calculada a partir da relação com a taxa de expansão ($\epsilon$). A taxa de expansão é a razão entre a àrea de saída do bucal (Ae) e a área da garganta (At):

\begin{equation}
\epsilon = \frac{A_e}{A_t}
\end{equation}

A expressão que envolve a taxa de expansão e a pressão de saída parte da lei de conservação da massa e de relações isentrópicas. 

\begin{equation}
\epsilon = \frac{A_e}{A_t} = \frac{\rho_tv_t}{\rho_ev_e} = \left(\left( \frac{\gamma + 1}{2}\right)^{\frac{1}{\gamma-1}} \left( \frac{p_e}{p_c}\right)^{\frac{1}{\gamma}}  \sqrt{\frac{\gamma + 1}{\gamma-1}\left(1 - \left(\frac{p_e}{p_c} \right)^{\frac{\gamma-1}{\gamma}}  \right)}\right)^{-1}
\end{equation}

Para resolver esta equação são necessárias as seguintes variáveis:

$\gamma$ : Razão da capacidade de calor de exaustão;

At ($m^2$): Área da garganta do bucal (nozzle throat);

Ae ($m^2$): Área da saída do bucal (nozzle);

Pc ($Pa$): Pressão na câmara;

Pe ($Pa$): Pressão de saída;

Para resolver esta equação não linear é utlizada a função "fsolve" do pacote scipy. O método retorna as raízes da equação definida como func(x) = 0 dado uma estimativa inicial. 
Para se adequar ao método a equação $\frac{A_e}{A_t} = f(p_e)$ pode ser reescrita como $\frac{A_e}{A_t} - f(p_e) = 0$. Para facilitar a representação, a expressão $f(p_e)$ foi escrita separadamente na função "TaxaExpansao".

Algumas informações sobre os algoritmos envolvidos no "fsolve" podem ser encontrados no fórum:
[Stack Exchange Network ](https://math.stackexchange.com/questions/3642041/what-is-the-function-fsolve-in-python-doing-mathematically)
"""

def TaxaExpansao(p_c, p_e, gamma):
    """Expressão da taxa de expansão em função da pressão de saída (Pe). 
    Refer: Rocket Propulsion Elements, 8th Edition, Equation 3-25
    Argumentos:
        p_c (escalar):Pressão da câmara [unidade: pascal].
        p_e (escalar): Pressão da saída do bucal [unidade: pascal].
        gamma (escalar): Razão da capacidade de calor de exaustão [unidade: adimensional].
    Retorna:
        Escalar: Taxa de expansão (A_e / A_t) [unidade: adimensional]
    """
    AtAe = ((gamma + 1) / 2)**(1 / (gamma - 1)) \
        * (p_e / p_c)**(1 / gamma) \
        * ((gamma + 1) / (gamma - 1)*( 1 - (p_e / p_c)**((gamma -1) / gamma)))**0.5
    AeAt = 1/AtAe
    return AeAt

def RazaoPressoes(AeAt, gamma):
    """Determina a razão entre a pressão de saída e a pressão na câmara (Pe/Pc) a partir da taxa de expansão (Ae/At). 
    
    Referência: Rocket Propulsion Elements, 8th Edition, Equation 3-25
    Argumentos:
        AeAt (escalar): Taxa de expansão (A_e / A_t) [unidade: adimensional].
        gamma (escalar): Razão da capacidade de calor de exaustão [unidade: adimensional].
    Returna:
        Escalar: Razão das pressões (Pe/Pc) [unidade: adimensional].
    """
    PePc = fsolve(lambda x: AeAt - TaxaExpansao(1., x, gamma), x0=1e-3 / AeAt)[0]
    assert PePc < 1
    return PePc

# Pressão de saída

# p_e = p_c * nozzle.pressure_from_er(A_e / A_t, gamma) #[unidade: pascal]$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
p_e = p_c * RazaoPressoes(A_e / A_t, gamma) #[unidade: pascal]$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
print(p_e)

def thrust_coef(p_c, p_e, gamma, p_a=None, er=None):
    """Nozzle thrust coefficient, :math:`C_F`.
    The thrust coefficient is a figure of merit for the nozzle expansion process.
    See :ref:`thrust-coefficient-label` for a description of the physical meaning of the
    thrust coefficient.
    Reference: Equation 1-33a in Huzel and Huang.
    Arguments:
        p_c (scalar): Nozzle stagnation chamber pressure [units: pascal].
        p_e (scalar): Nozzle exit static pressure [units: pascal].
        gamma (scalar): Exhaust gas ratio of specific heats [units: dimensionless].
        p_a (scalar, optional): Ambient pressure [units: pascal]. If None,
            then p_a = p_e.
        er (scalar, optional): Nozzle area expansion ratio [units: dimensionless]. If None,
            then p_a = p_e.
    Returns:
        scalar: The thrust coefficient, :math:`C_F` [units: dimensionless].
    """
    if (p_a is None and er is not None) or (er is None and p_a is not None):
        raise ValueError('Both p_a and er must be provided.')
    C_F = (2 * gamma**2 / (gamma - 1) \
        * (2 / (gamma + 1))**((gamma + 1) / (gamma - 1)) \
        * (1 - (p_e / p_c)**((gamma - 1) / gamma))
          )**0.5
    if p_a is not None and er is not None:
        C_F += er * (p_e - p_a) / p_c
    return C_F

# Força de Empuxo

p_a = 101325    # Pressão do ambiente [unidade: pascal]
F = A_t * p_c * thrust_coef(p_c, p_e, gamma, p_a, A_e / A_t)   # Força de empuxo [unidade: Newton]
#F = nozzle.thrust(A_t, p_c, p_e, gamma, p_a, A_e / A_t)

# Tempo

t = cumtrapz(1 / r, x, initial=0)  # [unidade: segundos]

#t, p_c, F = solid.thrust_curve(A_b, x, A_t, A_e, p_a, a, n, rho_solid, c_star, gamma)

# Plot resultadoss.
ax1 = plt.subplot(2, 1, 1)
plt.plot(t, p_c * 1e-6)
plt.ylabel('Chamber pressure [MPa]')

ax2 = plt.subplot(2, 1, 2)
plt.plot(t, F * 1e-3)
plt.ylabel('Thrust, sea level [kN]')
plt.xlabel('Time [s]')
plt.setp(ax1.get_xticklabels(), visible=False)

plt.tight_layout()
plt.subplots_adjust(hspace=0)
plt.show()

